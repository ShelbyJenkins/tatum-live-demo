---
import BaseLayout from '../../layouts/BaseLayout.astro';
import ServiceConfig from '../../components/ServiceConfig.astro';
import CodePanel from '../../components/CodePanel.astro';
import CodeComparisonTabs from '../../components/CodeComparisonTabs.astro';
import { Content as nativeEthBlockNumber } from '../../content/codeSamples/nativeEthBlockNumber.md';
import { Content as nativeTrxBlockNumber } from '../../content/codeSamples/nativeTrxBlockNumber.md';
import { Content as tatumEvmBlockNumber } from '../../content/codeSamples/tatumEvmBlockNumber.md';

const demoText = "Get the latest block number from any EVM mainnet";
---
<BaseLayout>
	<article>
		<h1>Get the latest block number on any EVM</h1>
		<div class="divider"></div>
		<CodeComparisonTabs tatumSdk={tatumEvmBlockNumber} nativeVariant1={nativeEthBlockNumber} nativeVariantName1="EVM RPC" nativeVariant2={nativeTrxBlockNumber} nativeVariantName2="TRON RPC"/>
		<div class="flex flex-col items-center mt-10 w-full">
			<ServiceConfig serviceType="LOAD_BALANCER_NETWORKS"/>
			<button class="btn mt-4 btn-wide border-2 border-tatum-green hover:bg-tatum-green" id="actionButton">Try with Tatum</button>
			<CodePanel htmlId="responseTextbox" placeHolder={demoText}/>
		</div>
	</article>
</BaseLayout>
<script>
	import { TatumSDK, Network  } from '@tatumio/tatum'
	import { getNetwork } from '../../scripts/networks'
	let serviceConfigNetwork;
	let responseTextbox;

	async function getBlock() {
		const currentTimestamp = new Date().toLocaleTimeString();
		try {
			responseTextbox.value = '';
			const requestNetwork: Network = getNetwork(serviceConfigNetwork.value);
			const tatum = await TatumSDK.init({network: Network.TRON});
			const latestBlockResponse = await tatum.rpc.blockNumber();
			if (latestBlockResponse.result !== undefined) {
				responseTextbox.innerText = `Latest block number: ${latestBlockResponse.result} on ${serviceConfigNetwork.value}`
				console.log(`Latest block number: ${latestBlockResponse.result} on ${serviceConfigNetwork.value}`)
			} else {
				throw new Error("Unexpected response structure");
			}
		} catch (e) {
			responseTextbox.value = `Error fetching the latest block at ${currentTimestamp}:\n\n` + (e.message || JSON.stringify(e));
		}
	}

	document.addEventListener('DOMContentLoaded', function() {
		const actionButton = document.getElementById('actionButton');
		serviceConfigNetwork = document.getElementById('serviceConfigNetwork') as HTMLInputElement;
		responseTextbox = document.getElementById('responseTextbox') as HTMLInputElement;
		if (!actionButton || !responseTextbox || !serviceConfigNetwork) {
			throw new Error('Could not find the required elements');
		}
		actionButton.addEventListener('click', async function() {await getBlock();});
	});

</script>